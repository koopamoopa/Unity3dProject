using System.Collections;
using System.Collections.Generic;
using UnityEngine;

// code generated by ChatGPT to combine the 2 seperate controllers into 1 to decrease complexity (and save me time :3)
public class TwoDimensionalAnimationStateController : MonoBehaviour
{
    // Movement variables
    public float acceleration = 2.0f;
    public float deceleration = 2.0f;
    public float maxWalkVel = 0.5f;
    public float maxRunVel = 2.0f;

    // Animation variables
    private Animator animator;
    private float velocityZ = 0.0f;
    private float velocityX = 0.0f;

    // Target location
    public Vector3 targetPosition; // Set this in the inspector or dynamically
    public float reachThreshold = 0.1f; // Distance to consider the target reached

    // Input states
    private bool forwardPressed = false;
    private bool leftPressed = false;
    private bool rightPressed = false;
    private bool runPressed = false;

    void Start()
    {
        animator = GetComponent<Animator>();
        targetPosition = transform.position; // Initialize target position to current position
    }

    void Update()
    {
        // Handle toggle inputs
        if (Input.GetKeyDown("w")) forwardPressed = !forwardPressed;
        if (Input.GetKeyDown("a")) leftPressed = !leftPressed;
        if (Input.GetKeyDown("d")) rightPressed = !rightPressed;
        if (Input.GetKeyDown("left shift")) runPressed = !runPressed;

        float currMaxVel = runPressed ? maxRunVel : maxWalkVel;

        // Check if the YBot is close enough to the target position
        if (Vector3.Distance(transform.position, targetPosition) > reachThreshold)
        {
            // Calculate direction to target
            Vector3 direction = (targetPosition - transform.position).normalized;
            velocityZ = direction.z * currMaxVel; // Use direction.z for forward movement
            velocityX = direction.x * currMaxVel; // Use direction.x for side movement
        }
        else
        {
            // Stop movement if the target is reached
            velocityZ = 0.0f;
            velocityX = 0.0f;
        }

        // Update position
        Vector3 movement = new Vector3(velocityX, 0, velocityZ) * Time.deltaTime;
        transform.position += movement;

        // Update animator parameters
        animator.SetFloat("Velocity Z", velocityZ);
        animator.SetFloat("Velocity X", velocityX);
    }

    // Method to set a new target position
    public void SetTargetPosition(Vector3 newTarget)
    {
        targetPosition = newTarget;
    }
}
